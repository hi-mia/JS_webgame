/*
2.2 자료형

값(value): 프로그램이 조작할 수 있는 데이터
자료형(data type): 값의 종류

1) 문자열(string): 문자들이 하나 이상 나열됨
-문자열 표현: 1) 작은 따옴표, 큰 따옴표 / 2) 백틱(`, backtick 또는 backquote)
-템플릿 리터럴: 백틱으로 감싸진 문자열
-식/표현식(expression): 결괏값이 나오는 명령

-연산자(operator): 어떠한 값에 특정 작업을 수행하라는 기호
ex) typeof / + 

-이스케이핑(escaping): 문자가 다르게 해석되게 하는 행위

2) 숫자형(number): 따옴표로 감싸지 않고 그대로 적기
-지수표기법(exponential notation): 매우 큰 숫자나 소수점 아래 자릿수가 많을 때 숫자 표현
e 뒤에 나오는 숫자만큼 10의 거듭제곱하면 원래 숫자가 됨

-prompt(): 직접 값 입력 가능

-NaN: Not a Number (but 숫자형)
-산술 연산자: +, -, *, /, %(나머지), **(거듭제곱)

*/

//2.2.1 문자열(string)--------------------------------------------------------
'Hello world!'
"Hello wolrd!" //문자열: 작은 따옴표 or 큰 따옴표로 감쌈

//현재 값이 문자열인지 확인: typeof 
typeof "Hello, world!";     // 결과: "string"
typeof '';                  // 결과: "string"

//비교 연산자(==)
'' == ' ';          // 결과: false


//문자열 안에서 따옴표 사용하기
"문자열 안에 작은따옴표(')가 있어요";
'문자열 안에 큰따옴표(")가 있어요'; // 다른 종류의 따옴표로 감싸기

"문자열 안에 큰따옴표(\")가 있어요"; 
'문자열 안에 작은따옴표(\')가 있어요';  // 따옴표 앞에 \붙이기
//결과: "문자열 안에 작은따옴표(')가 있어요"

/*
백슬래시(\)를 붙이면 그 다음에 나오는 문자를 기존과는 다르게 처리하라고 엔진에게 알리는 역할
\가 붙은 따옴표는 보통의 문자로 해석됨 = 따옴표를 이스케이핑한다

이스케이핑(escaping): 문자가 다르게 해석되게 하는 행위
*/

'문자열 안에 백슬래시(\\)가 있어요';   // 백슬래시 이스케이핑
//결과: '문자열 안에 백슬래시(\)가 있어요'


//문자열 여러 줄로 나타내기: \n
'여러 줄에 걸쳐\n표시됩니다.'; // \n 문자를 사용하지 않고 줄바꿈하면 에러 발생
'여러 줄에 걸쳐\n표시됩니다. \n\n줄을 더 늘려볼까요.'; //여러 줄


//템플릿 리터럴 사용하기
`저도 문자열입니다.`;   //문자열 표현: 백틱(`) 사용, 템플릿 리터럴: 백틱으로 감싸진 문자열
``;     //결과: "" (빈 문자열)
`문자열 안에 백틱(\`)이 있어요`     //결과: "문자열 안에 백틱(`)이 있어요"  (이스케이핑)

`여러 줄에 걸쳐
표시됩니다.

줄을 더 늘려볼까요`;    // 백틱 문자열 사용하면 \n 문자를 사용하지 않아도 줄바꿈 가능


//문자열 합치기: '+' 기호 사용
'문자열이 긴 경우에는 문자열을 ' + '나눈 뒤에 다시 합칩니다.'; // '+'기호도 연산자이다
'문자열이 긴 경우에는 ' + '문자열을 ' + '나눈 뒤 ' + '다시 합칩니다.'; //여러 번 사용 가능

'문자열이 긴 경우에는 문자열을 '
+ '나눈 뒤 다시 합칩니다.';

'문자열이 긴 경우에는 문자열을 ' +
'나눈 뒤에 다시 합칩니다.';  //위와 같은 결과


//2.2.2 숫자(number)--------------------------------------------------------
5;
5.04;
-5;   //음수

//지수표기법
5e4;    // 5*10000 = 50000
5e+4;   // 5*10000 = 50000
5e-3;   // 5*(1/1000) = 0.005

typeof 5;       //결과: number
typeof '5';     //결과: "string"

//2진법(0b), 8진법(0o), 16진법(0x)
0b11;   //결과: 3 (1 x 2 + 1)
0o15;   // 13 (1 x 8 + 5)
0x1c;   // 28 (1 x 16 + c(12)) / 1~9는 숫자, 10~15는 a~f


//문자열을 숫자로 바꾸기: parseInt, parseFloat
parseInt('5');      // 5
typeof parseInt('5');   //"number"

//parseInt는 문자열을 정수로만 바꾼다, 정수 부분만 추출해 표시
parseInt('3.14');   //3

//parseFloat: 실수형
parseFloat('3.14');   //3.14

typeof parseInt(prompt());  // "number"

//다른 기수법 적용하기 - 해석하려는 값 뒤에 적용하려는 기수법 숫자를 콤마로 구분해 적기
parseInt(111, 2);   // 7  (111이라는 숫자를 2진법으로 해석: 1 x 4 + 1 x 2 + 1)

parseInt(111, 7);   // 57 (111이라는 숫자를 7진법으로 해석: 1 x 49 + 1 x 7 + 1)

parseInt(111, 10); // 111, parseInt(111)과 동일 (10진법은 기수 생략 가능)


//NaN 알아보기: Not a Number
parseInt(prompt()); //abc 입력 -> 결과: NaN
typeof NaN;     //결과: "number" (이름과 다르게 NaN은 숫자이다!)


//산술 연산자 사용하기
1 + 2;      // 3
6 - 10;     // -4
3 * 4;      // 12
6 / 4;      // 1.5
6 % 4;      // 2
2 ** 4;     // 16


//무한 값 알아보기
2 / 0;      //결과: Infinity
typeof Infinity; // "number"
-2 / 0;     // -Infinity (Infinity값은 음수도 있다)
Infinity - 100; // Infinity (무한을 나타내는 값이므로 사칙연산 하더라도 결과는 Infinity이다)
Infinity - Infinity; // NaN (무한-무한 성립(X))
0 / 0; // NaN